[{"/Users/ishansengupta/Desktop/perlin-noise/src/index.js":"1","/Users/ishansengupta/Desktop/perlin-noise/src/App.js":"2","/Users/ishansengupta/Desktop/perlin-noise/src/Scene.js":"3","/Users/ishansengupta/Desktop/perlin-noise/src/shaders/fragment.js":"4","/Users/ishansengupta/Desktop/perlin-noise/src/shaders/vertex.js":"5"},{"size":200,"mtime":1608832311341,"results":"6","hashOfConfig":"7"},{"size":646,"mtime":1608919393901,"results":"8","hashOfConfig":"7"},{"size":5764,"mtime":1608918960925,"results":"9","hashOfConfig":"7"},{"size":415,"mtime":1608919063582,"results":"10","hashOfConfig":"7"},{"size":1206,"mtime":1608918920392,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1r0cin3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ishansengupta/Desktop/perlin-noise/src/index.js",[],["25","26"],"/Users/ishansengupta/Desktop/perlin-noise/src/App.js",["27"],"import './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Outward Lines</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/fiber-website/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/outward-lines/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","/Users/ishansengupta/Desktop/perlin-noise/src/Scene.js",["28","29"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      preserveDrawingBuffer: true,\n      alpha: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setClearColor(\"#fff\");\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    \n\n    this.raycaster = new THREE.Raycaster();\n\n    this.mouse = new THREE.Vector2();\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.resize();\n    this.mouseEvents();\n  }\n\n  mouseEvents() {\n    let that = this;\n    function onMouseMove(event) {\n     \n     \n\n      that.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      that.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    that.raycaster.setFromCamera(that.mouse, that.camera);\n\n\n      let intersects = that.raycaster.intersectObjects([that.clearPlane]);\n      if(intersects[0]) {\n          let p = intersects[0].point;\n          \n          that.material.uniforms.uMouse.value = new THREE.Vector2(p.x,p.y)\n      }\n\n\n      \n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove, false);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        uMouse: { type: \"v2\", value: new THREE.Vector2(0, 0) },\n        resolution: { type: \"v4\", value: new THREE.Vector4()  },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n    });\n\n    this.geometry = new THREE.BufferGeometry();\n    let num = 2000;\n    let positions = new Float32Array(num * 3);\n    let angle = new Float32Array(num * 3);\n    let offset = new Float32Array(num * 3);\n    let life = new Float32Array(num * 3);\n    for (let i = 0; i < num; i++) {\n      positions.set(\n        [Math.random() * 0.3, Math.random() * 0.3, Math.random() * 0.3],\n        3 * i\n      );\n\n      angle.set([Math.random() * Math.PI * 2], i);\n\n      life.set([4 + Math.random() * 10], i);\n\n      offset.set([1000 * Math.random()], i);\n    }\n\n    this.geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n    this.geometry.setAttribute(\"angle\", new THREE.BufferAttribute(angle, 1));\n\n    this.geometry.setAttribute(\"life\", new THREE.BufferAttribute(life, 1));\n\n    this.geometry.setAttribute(\"offset\", new THREE.BufferAttribute(offset, 1));\n    this.dots = new THREE.Points(this.geometry, this.material);\n    this.scene.add(this.dots);\n\n    this.clearPlane = new THREE.Mesh(\n      new THREE.PlaneGeometry(7, 7),\n      new THREE.MeshBasicMaterial({\n        transparent: true,\n        color: 0x0000ff,\n        opacity: 0.01,\n      })\n    );\n    this.scene.add(this.clearPlane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","/Users/ishansengupta/Desktop/perlin-noise/src/shaders/fragment.js",[],"/Users/ishansengupta/Desktop/perlin-noise/src/shaders/vertex.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":17,"column":7,"nodeType":"36","endLine":17,"endColumn":43},{"ruleId":"37","severity":1,"message":"38","line":3,"column":10,"nodeType":"39","messageId":"40","endLine":3,"endColumn":23},{"ruleId":"37","severity":1,"message":"41","line":81,"column":9,"nodeType":"39","messageId":"40","endLine":81,"endColumn":13},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'OrbitControls' is defined but never used.","Identifier","unusedVar","'that' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]