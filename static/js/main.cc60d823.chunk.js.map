{"version":3,"sources":["Scene.js","shaders/vertex.js","shaders/fragment.js","App.js","index.js"],"names":["Scene","props","setupResize","window","addEventListener","resize","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","preserveDrawingBuffer","alpha","autoClear","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","mount","clientWidth","clientHeight","appendChild","domElement","position","set","raycaster","mouse","time","addObjects","mouseEvents","that","event","x","clientX","innerWidth","y","clientY","innerHeight","setFromCamera","intersects","intersectObjects","clearPlane","p","point","material","uniforms","uMouse","value","extensions","derivatives","side","type","resolution","uvRate1","vertexShader","fragmentShader","transparent","depthTest","depthWrite","geometry","num","positions","Float32Array","angle","offset","life","i","Math","random","PI","setAttribute","dots","add","color","opacity","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","render","id","ref","Component","App","className","href","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.cc60d823.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      preserveDrawingBuffer: true,\n      alpha: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setClearColor(\"#fff\");\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 2);\n    \n\n    this.raycaster = new THREE.Raycaster();\n\n    this.mouse = new THREE.Vector2();\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.resize();\n    this.mouseEvents();\n  }\n\n  mouseEvents() {\n    let that = this;\n    function onMouseMove(event) {\n     \n     \n\n      that.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      that.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    that.raycaster.setFromCamera(that.mouse, that.camera);\n\n\n      let intersects = that.raycaster.intersectObjects([that.clearPlane]);\n      if(intersects[0]) {\n          let p = intersects[0].point;\n          \n          that.material.uniforms.uMouse.value = new THREE.Vector2(p.x,p.y)\n      }\n\n\n      \n    }\n\n    window.addEventListener(\"mousemove\", onMouseMove, false);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        uMouse: { type: \"v2\", value: new THREE.Vector2(0, 0) },\n        resolution: { type: \"v4\", value: new THREE.Vector4()  },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n    });\n\n    this.geometry = new THREE.BufferGeometry();\n    let num = 2000;\n    let positions = new Float32Array(num * 3);\n    let angle = new Float32Array(num * 3);\n    let offset = new Float32Array(num * 3);\n    let life = new Float32Array(num * 3);\n    for (let i = 0; i < num; i++) {\n      positions.set(\n        [Math.random() * 0.3, Math.random() * 0.3, Math.random() * 0.3],\n        3 * i\n      );\n\n      angle.set([Math.random() * Math.PI * 2], i);\n\n      life.set([4 + Math.random() * 10], i);\n\n      offset.set([1000 * Math.random()], i);\n    }\n\n    this.geometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n    this.geometry.setAttribute(\"angle\", new THREE.BufferAttribute(angle, 1));\n\n    this.geometry.setAttribute(\"life\", new THREE.BufferAttribute(life, 1));\n\n    this.geometry.setAttribute(\"offset\", new THREE.BufferAttribute(offset, 1));\n    this.dots = new THREE.Points(this.geometry, this.material);\n    this.scene.add(this.dots);\n\n    this.clearPlane = new THREE.Mesh(\n      new THREE.PlaneGeometry(7, 7),\n      new THREE.MeshBasicMaterial({\n        transparent: true,\n        color: 0x0000ff,\n        opacity: 0.01,\n      })\n    );\n    this.scene.add(this.clearPlane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float vAlpha;\nuniform sampler2D texture1; \nuniform sampler2D texture2;\n\nuniform vec2 pixels;\nuniform vec2 uvRate1;\nuniform vec2 uMouse;\n\nattribute float angle;\nattribute float life;\nattribute float offset;\n\n\nvoid main()\t{\n    vUv = uv; \n\n    float current = mod(offset + time/2.,life);\n    float percent = current / life; \n\n    vec3 newpos  = position;\n    vAlpha = smoothstep(0.,0.05,percent);\n    vAlpha -= smoothstep(0.85,1.,percent);\n\n  \nfloat dir = angle + sin(time/10.)*0.2;\n    newpos.x += cos(dir)*current*0.15;\n    newpos.y += sin(dir)*current*0.15;\n\n    vec3 curpos = newpos;\n    float mouseRadius = 0.35;\n    float dist = distance(curpos.xy, uMouse);\n    float strength = dist/mouseRadius;\n \n    strength = 1. - smoothstep(0.,1.,strength);\n    float dx = uMouse.x - curpos.x;\n    float dy = uMouse.y - curpos.y;\n    float angleangle = atan(dy,dx);\n\n    newpos.x += cos(angleangle)*strength*0.5;\n    newpos.y += sin(angleangle)*strength*0.5;\n\n    vec4 mvPosition = modelViewMatrix * vec4( newpos, 1.);\n    gl_PointSize = 30. * (1. / -mvPosition.z); \n    gl_Position = projectionMatrix * mvPosition;\n\n}\n`","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2; \nuniform vec4 resolution;\n\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float vAlpha;\nfloat PI = 3.141592653589793238;\n\n\n\nvoid main()\t{\n    \n\n    float d = length(gl_PointCoord - vec2(0.5));\n\n    float a = 1. - smoothstep(0.,0.5,d);\n \n    gl_FragColor = vec4(1.,1.,0.,a*vAlpha);\n}\n`;\n","import './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Outward Lines</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/fiber-website/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/outward-lines/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}