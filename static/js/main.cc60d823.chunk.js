(this["webpackJsonpthree-template"]=this["webpackJsonpthree-template"]||[]).push([[0],{17:function(e,t,n){},19:function(e,t,n){"use strict";n.r(t);var i=n(5),s=n(8),a=n.n(s),r=n(11),o=n.n(r),h=(n(17),n(0)),c=n(4),l=n(7),m=n(2),u=n(3),d=n(1),f=(n(18),function(e){Object(m.a)(n,e);var t=Object(u.a)(n);function n(e){var i;return Object(h.a)(this,n),(i=t.call(this,e)).setupResize=function(){window.addEventListener("resize",i.resize)},i.resize=function(){i.width=i.container.offsetWidth,i.height=i.container.offsetHeight,i.renderer.setSize(i.width,i.height),i.camera.aspect=i.width/i.height,console.log("resize"),i.imageAspect=853/1280,i.camera.updateProjectionMatrix(),console.log(i.camera)},i.start=i.start.bind(Object(l.a)(i)),i.stop=i.stop.bind(Object(l.a)(i)),i.animate=i.animate.bind(Object(l.a)(i)),i}return Object(c.a)(n,[{key:"componentDidMount",value:function(){this.scene=new d.m,this.renderer=new d.t({preserveDrawingBuffer:!0,alpha:!0}),this.renderer.autoClear=!1,this.renderer.setClearColor("#fff"),this.renderer.setSize(this.width,this.height),this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=d.u,this.container=document.getElementById("scene"),this.width=this.mount.clientWidth,this.height=this.mount.clientHeight,this.mount.appendChild(this.renderer.domElement),this.camera=new d.h(75,this.width/this.height,.001,1e3),this.camera.position.set(0,0,2),this.raycaster=new d.l,this.mouse=new d.q,this.time=0,this.setupResize(),this.addObjects(),this.animate(),this.resize(),this.mouseEvents()}},{key:"mouseEvents",value:function(){var e=this;window.addEventListener("mousemove",(function(t){e.mouse.x=t.clientX/window.innerWidth*2-1,e.mouse.y=-t.clientY/window.innerHeight*2+1,e.raycaster.setFromCamera(e.mouse,e.camera);var n=e.raycaster.intersectObjects([e.clearPlane]);if(n[0]){var i=n[0].point;e.material.uniforms.uMouse.value=new d.q(i.x,i.y)}}),!1)}},{key:"addObjects",value:function(){this.material=new d.n({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:d.c,uniforms:{time:{type:"f",value:0},uMouse:{type:"v2",value:new d.q(0,0)},resolution:{type:"v4",value:new d.s},uvRate1:{value:new d.q(1,1)}},vertexShader:"\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float vAlpha;\nuniform sampler2D texture1; \nuniform sampler2D texture2;\n\nuniform vec2 pixels;\nuniform vec2 uvRate1;\nuniform vec2 uMouse;\n\nattribute float angle;\nattribute float life;\nattribute float offset;\n\n\nvoid main()\t{\n    vUv = uv; \n\n    float current = mod(offset + time/2.,life);\n    float percent = current / life; \n\n    vec3 newpos  = position;\n    vAlpha = smoothstep(0.,0.05,percent);\n    vAlpha -= smoothstep(0.85,1.,percent);\n\n  \nfloat dir = angle + sin(time/10.)*0.2;\n    newpos.x += cos(dir)*current*0.15;\n    newpos.y += sin(dir)*current*0.15;\n\n    vec3 curpos = newpos;\n    float mouseRadius = 0.35;\n    float dist = distance(curpos.xy, uMouse);\n    float strength = dist/mouseRadius;\n \n    strength = 1. - smoothstep(0.,1.,strength);\n    float dx = uMouse.x - curpos.x;\n    float dy = uMouse.y - curpos.y;\n    float angleangle = atan(dy,dx);\n\n    newpos.x += cos(angleangle)*strength*0.5;\n    newpos.y += sin(angleangle)*strength*0.5;\n\n    vec4 mvPosition = modelViewMatrix * vec4( newpos, 1.);\n    gl_PointSize = 30. * (1. / -mvPosition.z); \n    gl_Position = projectionMatrix * mvPosition;\n\n}\n",fragmentShader:"\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform sampler2D texture2; \nuniform vec4 resolution;\n\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying float vAlpha;\nfloat PI = 3.141592653589793238;\n\n\n\nvoid main()\t{\n    \n\n    float d = length(gl_PointCoord - vec2(0.5));\n\n    float a = 1. - smoothstep(0.,0.5,d);\n \n    gl_FragColor = vec4(1.,1.,0.,a*vAlpha);\n}\n",transparent:!0,depthTest:!1,depthWrite:!1}),this.geometry=new d.b;for(var e=2e3,t=new Float32Array(6e3),n=new Float32Array(6e3),i=new Float32Array(6e3),s=new Float32Array(6e3),a=0;a<e;a++)t.set([.3*Math.random(),.3*Math.random(),.3*Math.random()],3*a),n.set([Math.random()*Math.PI*2],a),s.set([4+10*Math.random()],a),i.set([1e3*Math.random()],a);this.geometry.setAttribute("position",new d.a(t,3)),this.geometry.setAttribute("angle",new d.a(n,1)),this.geometry.setAttribute("life",new d.a(s,1)),this.geometry.setAttribute("offset",new d.a(i,1)),this.dots=new d.j(this.geometry,this.material),this.scene.add(this.dots),this.clearPlane=new d.f(new d.i(7,7),new d.g({transparent:!0,color:255,opacity:.01})),this.scene.add(this.clearPlane)}},{key:"componentWillUnmount",value:function(){this.stop(),this.mount.removeChild(this.renderer.domElement)}},{key:"start",value:function(){this.frameId||(this.frameId=requestAnimationFrame(this.animate))}},{key:"stop",value:function(){cancelAnimationFrame(this.frameId)}},{key:"animate",value:function(){this.time+=.05,this.material.uniforms.time.value=this.time,this.frameId=requestAnimationFrame(this.animate),this.renderScene()}},{key:"renderScene",value:function(){this.renderer.render(this.scene,this.camera)}},{key:"render",value:function(){var e=this;return Object(i.jsx)("div",{id:"scene",ref:function(t){e.mount=t}})}}]),n}(s.Component));var v=function(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsxs)("div",{className:"frame",children:[Object(i.jsx)("h1",{className:"frame__title",children:"Outward Lines"}),Object(i.jsx)("div",{className:"frame__links"}),Object(i.jsxs)("div",{className:"frame__nav",children:[Object(i.jsx)("a",{className:"frame__link",href:"https://isengupt.github.io/fiber-website/",children:"Previous"}),Object(i.jsx)("a",{className:"frame__link",href:"#",children:"Resume"}),Object(i.jsx)("a",{className:"frame__link",href:"https://github.com/isengupt/outward-lines/",children:"GitHub"})]})]}),Object(i.jsx)(f,{})]})};o.a.render(Object(i.jsx)(a.a.StrictMode,{children:Object(i.jsx)(v,{})}),document.getElementById("root"))}},[[19,1,2]]]);
//# sourceMappingURL=main.cc60d823.chunk.js.map